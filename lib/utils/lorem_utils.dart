import 'dart:math';

class LoremUtils {
  final Random _random = Random();

  final List<String> _nouns = [
    'time',
    'year',
    'people',
    'way',
    'day',
    'man',
    'thing',
    'woman',
    'life',
    'child',
    'world',
    'school',
    'state',
    'family',
    'student',
    'group',
    'country',
    'problem',
    'hand',
    'part',
    'place',
    'case',
    'week',
    'company',
    'system',
    'program',
    'question',
    'work',
    'government',
    'number',
    'night',
    'point',
    'home',
    'water',
    'room',
    'mother',
    'area',
    'money',
    'story',
    'fact',
    'month',
    'lot',
    'right',
    'study',
    'book',
    'eye',
    'job',
    'word',
    'business',
    'issue',
    'side',
    'kind',
    'head',
    'house',
    'service',
    'friend',
    'end',
    'law',
    'city',
    'community',
    'name',
    'president',
    'team',
    'minute',
    'idea',
    'kid',
    'body',
    'information',
    'back',
    'parent',
    'face',
    'others',
    'level',
    'office',
    'door',
    'health',
    'person',
    'art',
    'war',
    'history',
    'party',
    'result',
    'change',
    'morning',
    'reason',
    'research',
    'girl',
    'guy',
    'moment',
    'air',
    'teacher',
    'force',
    'education',
    'foot',
    'boy'
  ];

  final List<String> _verbs = [
    'be',
    'have',
    'do',
    'say',
    'get',
    'make',
    'go',
    'know',
    'take',
    'see',
    'come',
    'think',
    'look',
    'want',
    'give',
    'use',
    'find',
    'tell',
    'ask',
    'work',
    'seem',
    'feel',
    'try',
    'leave',
    'call',
    'need',
    'become',
    'put',
    'mean',
    'keep',
    'let',
    'begin',
    'seem',
    'help',
    'talk',
    'turn',
    'start',
    'show',
    'hear',
    'play',
    'run',
    'move',
    'like',
    'live',
    'believe',
    'hold',
    'bring',
    'happen',
    'write',
    'provide',
    'sit',
    'stand',
    'lose',
    'pay',
    'meet',
    'include',
    'continue',
    'set',
    'learn',
    'change',
    'lead',
    'understand',
    'watch',
    'follow',
    'stop',
    'create',
    'speak',
    'read',
    'allow',
    'add',
    'spend',
    'grow',
    'open',
    'walk',
    'win',
    'offer',
    'remember',
    'love',
    'consider',
    'appear',
    'buy',
    'wait',
    'serve',
    'die'
  ];

  final List<String> _adjectives = [
    'good',
    'new',
    'first',
    'last',
    'long',
    'great',
    'little',
    'own',
    'other',
    'old',
    'right',
    'big',
    'high',
    'different',
    'small',
    'large',
    'next',
    'early',
    'young',
    'important',
    'few',
    'public',
    'bad',
    'same',
    'able',
    'happy',
    'angry',
    'sad',
    'proud',
    'calm',
    'brave',
    'bright',
    'dark',
    'clear',
    'simple',
    'strong',
    'weak',
    'heavy',
    'light',
    'hard',
    'soft',
    'warm',
    'cool',
    'free',
    'full',
    'empty',
    'quick',
    'slow',
    'hot',
    'cold',
    'dry',
    'wet',
    'clean',
    'dirty',
    'quiet',
    'loud',
    'short',
    'long',
    'tall',
    'tiny',
    'huge',
    'fast',
    'slow',
    'friendly',
    'unfriendly',
    'kind',
    'unkind',
    'polite',
    'rude',
    'generous',
    'stingy',
    'brave',
    'cowardly',
    'honest',
    'dishonest'
  ];

  String _getRandomElement(List<String> list) {
    return list[_random.nextInt(list.length)];
  }

  /// Generates a random sentence with a given minimum and maximum number of words.
  ///
  /// The sentence is generated by randomly selecting words from a list of nouns, verbs,
  /// and adjectives. The first letter of the sentence is capitalized and a period is
  /// appended to the end of the sentence.
  ///
  /// Parameters:
  /// - minWords: The minimum number of words in the sentence.
  /// - maxWords: The maximum number of words in the sentence.
  ///
  /// Returns:
  /// A randomly generated sentence with the specified number of words.
  String _generateSentence(int minWords, int maxWords) {
    int wordCount = minWords + _random.nextInt(maxWords - minWords + 1);
    List<String> sentenceWords = [];

    for (int i = 0; i < wordCount; i++) {
      String word;
      if (i % 4 == 0) {
        word = _getRandomElement(_nouns);
      } else if (i % 4 == 1) {
        word = _getRandomElement(_verbs);
      } else if (i % 4 == 2) {
        word = _getRandomElement(_adjectives);
      } else {
        word = _getRandomElement(_nouns);
      }
      sentenceWords.add(word);
    }

    String sentence = sentenceWords.join(' ');
    return '${sentence[0].toUpperCase()}${sentence.substring(1)}.';
  }

  /// Generates a paragraph with a random number of sentences, where each sentence has a random number of words.
  ///
  /// The number of sentences in the paragraph is determined by the `minSentences` and `maxSentences` parameters.
  /// The number of words in each sentence is determined by the `minWordsPerSentence` and `maxWordsPerSentence` parameters.
  ///
  /// Parameters:
  /// - `minSentences`: The minimum number of sentences in the paragraph.
  /// - `maxSentences`: The maximum number of sentences in the paragraph.
  /// - `minWordsPerSentence`: The minimum number of words in each sentence.
  /// - `maxWordsPerSentence`: The maximum number of words in each sentence.
  ///
  /// Returns:
  /// A string representing the generated paragraph.
  String generateParagraph(int minSentences, int maxSentences, int minWordsPerSentence, int maxWordsPerSentence) {
    int sentenceCount = minSentences + _random.nextInt(maxSentences - minSentences + 1);
    return List.generate(sentenceCount, (_) => _generateSentence(minWordsPerSentence, maxWordsPerSentence)).join(' ');
  }

  /// Generates a Lorem Ipsum text with a specified number of paragraphs,
  /// each containing a random number of sentences, where each sentence has a random number of words.
  ///
  /// The number of paragraphs is determined by the `paragraphCount` parameter.
  /// The number of sentences in each paragraph is determined by the `minSentences` and `maxSentences` parameters.
  /// The number of words in each sentence is determined by the `minWordsPerSentence` and `maxWordsPerSentence` parameters.
  ///
  /// Parameters:
  /// - `paragraphCount`: The number of paragraphs in the generated text.
  /// - `minSentences`: The minimum number of sentences in each paragraph.
  /// - `maxSentences`: The maximum number of sentences in each paragraph.
  /// - `minWordsPerSentence`: The minimum number of words in each sentence.
  /// - `maxWordsPerSentence`: The maximum number of words in each sentence.
  /// - `startWithLorem` (optional): A boolean indicating whether to start the generated text with the phrase "Lorem ipsum dolor sit amet, consectetur adipiscing elit." (default: true).
  ///
  /// Returns:
  /// A string representing the generated Lorem Ipsum text.
  String generateLoremIpsum(
      int paragraphCount, int minSentences, int maxSentences, int minWordsPerSentence, int maxWordsPerSentence,
      {bool startWithLorem = true}) {
    String lorem = List.generate(paragraphCount,
        (_) => generateParagraph(minSentences, maxSentences, minWordsPerSentence, maxWordsPerSentence)).join('\n\n');
    if (startWithLorem) {
      return 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. $lorem';
    } else {
      return lorem;
    }
  }
}
